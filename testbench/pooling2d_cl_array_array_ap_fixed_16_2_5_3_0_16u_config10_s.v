// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [15:0] kernel_data_V_2_16;
reg   [15:0] kernel_data_V_2_17;
reg   [15:0] kernel_data_V_2_18;
reg   [15:0] kernel_data_V_2_19;
reg   [15:0] kernel_data_V_2_20;
reg   [15:0] kernel_data_V_2_21;
reg   [15:0] kernel_data_V_2_22;
reg   [15:0] kernel_data_V_2_23;
reg   [15:0] kernel_data_V_2_24;
reg   [15:0] kernel_data_V_2_25;
reg   [15:0] kernel_data_V_2_26;
reg   [15:0] kernel_data_V_2_27;
reg   [15:0] kernel_data_V_2_28;
reg   [15:0] kernel_data_V_2_29;
reg   [15:0] kernel_data_V_2_30;
reg   [15:0] kernel_data_V_2_31;
reg   [15:0] kernel_data_V_2_48;
reg   [15:0] kernel_data_V_2_49;
reg   [15:0] kernel_data_V_2_50;
reg   [15:0] kernel_data_V_2_51;
reg   [15:0] kernel_data_V_2_52;
reg   [15:0] kernel_data_V_2_53;
reg   [15:0] kernel_data_V_2_54;
reg   [15:0] kernel_data_V_2_55;
reg   [15:0] kernel_data_V_2_56;
reg   [15:0] kernel_data_V_2_57;
reg   [15:0] kernel_data_V_2_58;
reg   [15:0] kernel_data_V_2_59;
reg   [15:0] kernel_data_V_2_60;
reg   [15:0] kernel_data_V_2_61;
reg   [15:0] kernel_data_V_2_62;
reg   [15:0] kernel_data_V_2_63;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [15:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [15:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [15:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [15:0] line_buffer_Array_V_2_0_3_q0;
reg    line_buffer_Array_V_2_0_4_ce0;
reg    line_buffer_Array_V_2_0_4_we0;
wire   [15:0] line_buffer_Array_V_2_0_4_q0;
reg    line_buffer_Array_V_2_0_5_ce0;
reg    line_buffer_Array_V_2_0_5_we0;
wire   [15:0] line_buffer_Array_V_2_0_5_q0;
reg    line_buffer_Array_V_2_0_6_ce0;
reg    line_buffer_Array_V_2_0_6_we0;
wire   [15:0] line_buffer_Array_V_2_0_6_q0;
reg    line_buffer_Array_V_2_0_7_ce0;
reg    line_buffer_Array_V_2_0_7_we0;
wire   [15:0] line_buffer_Array_V_2_0_7_q0;
reg    line_buffer_Array_V_2_0_8_ce0;
reg    line_buffer_Array_V_2_0_8_we0;
wire   [15:0] line_buffer_Array_V_2_0_8_q0;
reg    line_buffer_Array_V_2_0_9_ce0;
reg    line_buffer_Array_V_2_0_9_we0;
wire   [15:0] line_buffer_Array_V_2_0_9_q0;
reg    line_buffer_Array_V_2_0_10_ce0;
reg    line_buffer_Array_V_2_0_10_we0;
wire   [15:0] line_buffer_Array_V_2_0_10_q0;
reg    line_buffer_Array_V_2_0_11_ce0;
reg    line_buffer_Array_V_2_0_11_we0;
wire   [15:0] line_buffer_Array_V_2_0_11_q0;
reg    line_buffer_Array_V_2_0_12_ce0;
reg    line_buffer_Array_V_2_0_12_we0;
wire   [15:0] line_buffer_Array_V_2_0_12_q0;
reg    line_buffer_Array_V_2_0_13_ce0;
reg    line_buffer_Array_V_2_0_13_we0;
wire   [15:0] line_buffer_Array_V_2_0_13_q0;
reg    line_buffer_Array_V_2_0_14_ce0;
reg    line_buffer_Array_V_2_0_14_we0;
wire   [15:0] line_buffer_Array_V_2_0_14_q0;
reg    line_buffer_Array_V_2_0_15_ce0;
reg    line_buffer_Array_V_2_0_15_we0;
wire   [15:0] line_buffer_Array_V_2_0_15_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_2479;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln191_4_reg_2650;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [5:0] indvar_flatten_reg_726;
wire   [0:0] icmp_ln241_fu_748_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op61;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op325;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_2479_pp0_iter1_reg;
wire   [5:0] add_ln241_fu_754_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln191_5_fu_764_p2;
reg   [0:0] icmp_ln191_5_reg_2488;
wire   [0:0] icmp_ln191_6_fu_774_p2;
reg   [0:0] icmp_ln191_6_reg_2493;
wire   [0:0] icmp_ln212_fu_780_p2;
reg   [0:0] icmp_ln212_reg_2498;
wire   [0:0] icmp_ln216_fu_804_p2;
reg   [0:0] icmp_ln216_reg_2502;
reg   [15:0] pool_window_3_V_reg_2506;
reg   [15:0] pool_window_3_V_6_reg_2515;
reg   [15:0] pool_window_3_V_7_reg_2524;
reg   [15:0] pool_window_3_V_8_reg_2533;
reg   [15:0] pool_window_3_V_9_reg_2542;
reg   [15:0] pool_window_3_V_10_reg_2551;
reg   [15:0] pool_window_3_V_11_reg_2560;
reg   [15:0] pool_window_3_V_12_reg_2569;
reg   [15:0] pool_window_3_V_13_reg_2578;
reg   [15:0] pool_window_3_V_14_reg_2587;
reg   [15:0] pool_window_3_V_15_reg_2596;
reg   [15:0] pool_window_3_V_16_reg_2605;
reg   [15:0] pool_window_3_V_17_reg_2614;
reg   [15:0] pool_window_3_V_18_reg_2623;
reg   [15:0] pool_window_3_V_19_reg_2632;
reg   [15:0] pool_window_3_V_20_reg_2641;
wire   [0:0] and_ln191_4_fu_922_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_741_p4;
wire   [31:0] select_ln222_fu_960_p3;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_737;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_737;
wire   [31:0] add_ln225_fu_786_p2;
wire   [31:0] select_ln227_fu_934_p3;
wire   [31:0] add_ln220_fu_810_p2;
wire   [15:0] tmp_data_0_V_fu_1475_p6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_1541_p6;
wire   [15:0] tmp_data_2_V_fu_1607_p6;
wire   [15:0] tmp_data_3_V_fu_1673_p6;
wire   [15:0] tmp_data_4_V_fu_1739_p6;
wire   [15:0] tmp_data_5_V_fu_1805_p6;
wire   [15:0] tmp_data_6_V_fu_1871_p6;
wire   [15:0] tmp_data_7_V_fu_1937_p6;
wire   [15:0] tmp_data_8_V_fu_2003_p6;
wire   [15:0] tmp_data_9_V_fu_2069_p6;
wire   [15:0] tmp_data_10_V_fu_2135_p6;
wire   [15:0] tmp_data_11_V_fu_2201_p6;
wire   [15:0] tmp_data_12_V_fu_2267_p6;
wire   [15:0] tmp_data_13_V_fu_2333_p6;
wire   [15:0] tmp_data_14_V_fu_2399_p6;
wire   [15:0] tmp_data_15_V_fu_2465_p6;
wire   [0:0] icmp_ln191_fu_896_p2;
wire   [0:0] icmp_ln191_4_fu_906_p2;
wire   [0:0] and_ln191_3_fu_918_p2;
wire   [0:0] and_ln191_fu_912_p2;
wire   [31:0] add_ln227_fu_928_p2;
wire   [31:0] add_ln222_fu_954_p2;
wire   [0:0] icmp_ln1496_fu_1423_p2;
wire   [0:0] icmp_ln1496_90_fu_1437_p2;
wire   [15:0] select_ln65_fu_1429_p3;
wire   [15:0] select_ln65_133_fu_1450_p3;
wire   [0:0] icmp_ln1496_91_fu_1457_p2;
wire   [1:0] select_ln65_132_fu_1442_p3;
wire   [1:0] zext_ln65_fu_1463_p1;
wire   [1:0] tmp_data_0_V_fu_1475_p5;
wire   [0:0] icmp_ln1496_1_fu_1489_p2;
wire   [0:0] icmp_ln1496_92_fu_1503_p2;
wire   [15:0] select_ln65_135_fu_1495_p3;
wire   [15:0] select_ln65_137_fu_1516_p3;
wire   [0:0] icmp_ln1496_93_fu_1523_p2;
wire   [1:0] select_ln65_136_fu_1508_p3;
wire   [1:0] zext_ln65_18_fu_1529_p1;
wire   [1:0] tmp_data_1_V_fu_1541_p5;
wire   [0:0] icmp_ln1496_2_fu_1555_p2;
wire   [0:0] icmp_ln1496_94_fu_1569_p2;
wire   [15:0] select_ln65_138_fu_1561_p3;
wire   [15:0] select_ln65_140_fu_1582_p3;
wire   [0:0] icmp_ln1496_95_fu_1589_p2;
wire   [1:0] select_ln65_142_fu_1574_p3;
wire   [1:0] zext_ln65_19_fu_1595_p1;
wire   [1:0] tmp_data_2_V_fu_1607_p5;
wire   [0:0] icmp_ln1496_3_fu_1621_p2;
wire   [0:0] icmp_ln1496_96_fu_1635_p2;
wire   [15:0] select_ln65_141_fu_1627_p3;
wire   [15:0] select_ln65_143_fu_1648_p3;
wire   [0:0] icmp_ln1496_97_fu_1655_p2;
wire   [1:0] select_ln65_148_fu_1640_p3;
wire   [1:0] zext_ln65_20_fu_1661_p1;
wire   [1:0] tmp_data_3_V_fu_1673_p5;
wire   [0:0] icmp_ln1496_4_fu_1687_p2;
wire   [0:0] icmp_ln1496_98_fu_1701_p2;
wire   [15:0] select_ln65_144_fu_1693_p3;
wire   [15:0] select_ln65_146_fu_1714_p3;
wire   [0:0] icmp_ln1496_99_fu_1721_p2;
wire   [1:0] select_ln65_154_fu_1706_p3;
wire   [1:0] zext_ln65_21_fu_1727_p1;
wire   [1:0] tmp_data_4_V_fu_1739_p5;
wire   [0:0] icmp_ln1496_5_fu_1753_p2;
wire   [0:0] icmp_ln1496_100_fu_1767_p2;
wire   [15:0] select_ln65_147_fu_1759_p3;
wire   [15:0] select_ln65_149_fu_1780_p3;
wire   [0:0] icmp_ln1496_101_fu_1787_p2;
wire   [1:0] select_ln65_160_fu_1772_p3;
wire   [1:0] zext_ln65_22_fu_1793_p1;
wire   [1:0] tmp_data_5_V_fu_1805_p5;
wire   [0:0] icmp_ln1496_6_fu_1819_p2;
wire   [0:0] icmp_ln1496_102_fu_1833_p2;
wire   [15:0] select_ln65_150_fu_1825_p3;
wire   [15:0] select_ln65_152_fu_1846_p3;
wire   [0:0] icmp_ln1496_103_fu_1853_p2;
wire   [1:0] select_ln65_166_fu_1838_p3;
wire   [1:0] zext_ln65_23_fu_1859_p1;
wire   [1:0] tmp_data_6_V_fu_1871_p5;
wire   [0:0] icmp_ln1496_7_fu_1885_p2;
wire   [0:0] icmp_ln1496_104_fu_1899_p2;
wire   [15:0] select_ln65_153_fu_1891_p3;
wire   [15:0] select_ln65_155_fu_1912_p3;
wire   [0:0] icmp_ln1496_105_fu_1919_p2;
wire   [1:0] select_ln65_172_fu_1904_p3;
wire   [1:0] zext_ln65_24_fu_1925_p1;
wire   [1:0] tmp_data_7_V_fu_1937_p5;
wire   [0:0] icmp_ln1496_8_fu_1951_p2;
wire   [0:0] icmp_ln1496_106_fu_1965_p2;
wire   [15:0] select_ln65_156_fu_1957_p3;
wire   [15:0] select_ln65_158_fu_1978_p3;
wire   [0:0] icmp_ln1496_107_fu_1985_p2;
wire   [1:0] select_ln65_178_fu_1970_p3;
wire   [1:0] zext_ln65_25_fu_1991_p1;
wire   [1:0] tmp_data_8_V_fu_2003_p5;
wire   [0:0] icmp_ln1496_9_fu_2017_p2;
wire   [0:0] icmp_ln1496_108_fu_2031_p2;
wire   [15:0] select_ln65_159_fu_2023_p3;
wire   [15:0] select_ln65_161_fu_2044_p3;
wire   [0:0] icmp_ln1496_109_fu_2051_p2;
wire   [1:0] select_ln65_181_fu_2036_p3;
wire   [1:0] zext_ln65_26_fu_2057_p1;
wire   [1:0] tmp_data_9_V_fu_2069_p5;
wire   [0:0] icmp_ln1496_10_fu_2083_p2;
wire   [0:0] icmp_ln1496_110_fu_2097_p2;
wire   [15:0] select_ln65_162_fu_2089_p3;
wire   [15:0] select_ln65_164_fu_2110_p3;
wire   [0:0] icmp_ln1496_111_fu_2117_p2;
wire   [1:0] select_ln65_183_fu_2102_p3;
wire   [1:0] zext_ln65_27_fu_2123_p1;
wire   [1:0] tmp_data_10_V_fu_2135_p5;
wire   [0:0] icmp_ln1496_11_fu_2149_p2;
wire   [0:0] icmp_ln1496_112_fu_2163_p2;
wire   [15:0] select_ln65_165_fu_2155_p3;
wire   [15:0] select_ln65_167_fu_2176_p3;
wire   [0:0] icmp_ln1496_113_fu_2183_p2;
wire   [1:0] select_ln65_185_fu_2168_p3;
wire   [1:0] zext_ln65_28_fu_2189_p1;
wire   [1:0] tmp_data_11_V_fu_2201_p5;
wire   [0:0] icmp_ln1496_12_fu_2215_p2;
wire   [0:0] icmp_ln1496_114_fu_2229_p2;
wire   [15:0] select_ln65_168_fu_2221_p3;
wire   [15:0] select_ln65_170_fu_2242_p3;
wire   [0:0] icmp_ln1496_115_fu_2249_p2;
wire   [1:0] select_ln65_187_fu_2234_p3;
wire   [1:0] zext_ln65_29_fu_2255_p1;
wire   [1:0] tmp_data_12_V_fu_2267_p5;
wire   [0:0] icmp_ln1496_13_fu_2281_p2;
wire   [0:0] icmp_ln1496_116_fu_2295_p2;
wire   [15:0] select_ln65_171_fu_2287_p3;
wire   [15:0] select_ln65_173_fu_2308_p3;
wire   [0:0] icmp_ln1496_117_fu_2315_p2;
wire   [1:0] select_ln65_189_fu_2300_p3;
wire   [1:0] zext_ln65_30_fu_2321_p1;
wire   [1:0] tmp_data_13_V_fu_2333_p5;
wire   [0:0] icmp_ln1496_14_fu_2347_p2;
wire   [0:0] icmp_ln1496_118_fu_2361_p2;
wire   [15:0] select_ln65_174_fu_2353_p3;
wire   [15:0] select_ln65_176_fu_2374_p3;
wire   [0:0] icmp_ln1496_119_fu_2381_p2;
wire   [1:0] select_ln65_191_fu_2366_p3;
wire   [1:0] zext_ln65_31_fu_2387_p1;
wire   [1:0] tmp_data_14_V_fu_2399_p5;
wire   [0:0] icmp_ln1496_120_fu_2413_p2;
wire   [0:0] icmp_ln1496_121_fu_2427_p2;
wire   [15:0] select_ln65_177_fu_2419_p3;
wire   [15:0] select_ln65_179_fu_2440_p3;
wire   [0:0] icmp_ln1496_122_fu_2447_p2;
wire   [1:0] select_ln65_193_fu_2432_p3;
wire   [1:0] zext_ln65_32_fu_2453_p1;
wire   [1:0] tmp_data_15_V_fu_2465_p5;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_501;
reg    ap_condition_419;
reg    ap_condition_488;
reg    ap_condition_507;
reg    ap_condition_492;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_16 = 16'd0;
#0 kernel_data_V_2_17 = 16'd0;
#0 kernel_data_V_2_18 = 16'd0;
#0 kernel_data_V_2_19 = 16'd0;
#0 kernel_data_V_2_20 = 16'd0;
#0 kernel_data_V_2_21 = 16'd0;
#0 kernel_data_V_2_22 = 16'd0;
#0 kernel_data_V_2_23 = 16'd0;
#0 kernel_data_V_2_24 = 16'd0;
#0 kernel_data_V_2_25 = 16'd0;
#0 kernel_data_V_2_26 = 16'd0;
#0 kernel_data_V_2_27 = 16'd0;
#0 kernel_data_V_2_28 = 16'd0;
#0 kernel_data_V_2_29 = 16'd0;
#0 kernel_data_V_2_30 = 16'd0;
#0 kernel_data_V_2_31 = 16'd0;
#0 kernel_data_V_2_48 = 16'd0;
#0 kernel_data_V_2_49 = 16'd0;
#0 kernel_data_V_2_50 = 16'd0;
#0 kernel_data_V_2_51 = 16'd0;
#0 kernel_data_V_2_52 = 16'd0;
#0 kernel_data_V_2_53 = 16'd0;
#0 kernel_data_V_2_54 = 16'd0;
#0 kernel_data_V_2_55 = 16'd0;
#0 kernel_data_V_2_56 = 16'd0;
#0 kernel_data_V_2_57 = 16'd0;
#0 kernel_data_V_2_58 = 16'd0;
#0 kernel_data_V_2_59 = 16'd0;
#0 kernel_data_V_2_60 = 16'd0;
#0 kernel_data_V_2_61 = 16'd0;
#0 kernel_data_V_2_62 = 16'd0;
#0 kernel_data_V_2_63 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(pool_window_3_V_reg_2506),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(pool_window_3_V_6_reg_2515),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(pool_window_3_V_7_reg_2524),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(pool_window_3_V_8_reg_2533),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_4_ce0),
    .we0(line_buffer_Array_V_2_0_4_we0),
    .d0(pool_window_3_V_9_reg_2542),
    .q0(line_buffer_Array_V_2_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_5_ce0),
    .we0(line_buffer_Array_V_2_0_5_we0),
    .d0(pool_window_3_V_10_reg_2551),
    .q0(line_buffer_Array_V_2_0_5_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_6_ce0),
    .we0(line_buffer_Array_V_2_0_6_we0),
    .d0(pool_window_3_V_11_reg_2560),
    .q0(line_buffer_Array_V_2_0_6_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_7_ce0),
    .we0(line_buffer_Array_V_2_0_7_we0),
    .d0(pool_window_3_V_12_reg_2569),
    .q0(line_buffer_Array_V_2_0_7_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_8_ce0),
    .we0(line_buffer_Array_V_2_0_8_we0),
    .d0(pool_window_3_V_13_reg_2578),
    .q0(line_buffer_Array_V_2_0_8_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_9_ce0),
    .we0(line_buffer_Array_V_2_0_9_we0),
    .d0(pool_window_3_V_14_reg_2587),
    .q0(line_buffer_Array_V_2_0_9_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_10_ce0),
    .we0(line_buffer_Array_V_2_0_10_we0),
    .d0(pool_window_3_V_15_reg_2596),
    .q0(line_buffer_Array_V_2_0_10_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_11_ce0),
    .we0(line_buffer_Array_V_2_0_11_we0),
    .d0(pool_window_3_V_16_reg_2605),
    .q0(line_buffer_Array_V_2_0_11_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_12_ce0),
    .we0(line_buffer_Array_V_2_0_12_we0),
    .d0(pool_window_3_V_17_reg_2614),
    .q0(line_buffer_Array_V_2_0_12_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_13_ce0),
    .we0(line_buffer_Array_V_2_0_13_we0),
    .d0(pool_window_3_V_18_reg_2623),
    .q0(line_buffer_Array_V_2_0_13_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_14_ce0),
    .we0(line_buffer_Array_V_2_0_14_we0),
    .d0(pool_window_3_V_19_reg_2632),
    .q0(line_buffer_Array_V_2_0_14_q0)
);

pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s_line_buffer_ArrayVhK #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
line_buffer_Array_V_2_0_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(3'd6),
    .ce0(line_buffer_Array_V_2_0_15_ce0),
    .we0(line_buffer_Array_V_2_0_15_we0),
    .d0(pool_window_3_V_20_reg_2641),
    .q0(line_buffer_Array_V_2_0_15_q0)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U660(
    .din0(kernel_data_V_2_16),
    .din1(line_buffer_Array_V_2_0_0_q0),
    .din2(kernel_data_V_2_48),
    .din3(pool_window_3_V_reg_2506),
    .din4(tmp_data_0_V_fu_1475_p5),
    .dout(tmp_data_0_V_fu_1475_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U661(
    .din0(kernel_data_V_2_17),
    .din1(line_buffer_Array_V_2_0_1_q0),
    .din2(kernel_data_V_2_49),
    .din3(pool_window_3_V_6_reg_2515),
    .din4(tmp_data_1_V_fu_1541_p5),
    .dout(tmp_data_1_V_fu_1541_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U662(
    .din0(kernel_data_V_2_18),
    .din1(line_buffer_Array_V_2_0_2_q0),
    .din2(kernel_data_V_2_50),
    .din3(pool_window_3_V_7_reg_2524),
    .din4(tmp_data_2_V_fu_1607_p5),
    .dout(tmp_data_2_V_fu_1607_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U663(
    .din0(kernel_data_V_2_19),
    .din1(line_buffer_Array_V_2_0_3_q0),
    .din2(kernel_data_V_2_51),
    .din3(pool_window_3_V_8_reg_2533),
    .din4(tmp_data_3_V_fu_1673_p5),
    .dout(tmp_data_3_V_fu_1673_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U664(
    .din0(kernel_data_V_2_20),
    .din1(line_buffer_Array_V_2_0_4_q0),
    .din2(kernel_data_V_2_52),
    .din3(pool_window_3_V_9_reg_2542),
    .din4(tmp_data_4_V_fu_1739_p5),
    .dout(tmp_data_4_V_fu_1739_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U665(
    .din0(kernel_data_V_2_21),
    .din1(line_buffer_Array_V_2_0_5_q0),
    .din2(kernel_data_V_2_53),
    .din3(pool_window_3_V_10_reg_2551),
    .din4(tmp_data_5_V_fu_1805_p5),
    .dout(tmp_data_5_V_fu_1805_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U666(
    .din0(kernel_data_V_2_22),
    .din1(line_buffer_Array_V_2_0_6_q0),
    .din2(kernel_data_V_2_54),
    .din3(pool_window_3_V_11_reg_2560),
    .din4(tmp_data_6_V_fu_1871_p5),
    .dout(tmp_data_6_V_fu_1871_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U667(
    .din0(kernel_data_V_2_23),
    .din1(line_buffer_Array_V_2_0_7_q0),
    .din2(kernel_data_V_2_55),
    .din3(pool_window_3_V_12_reg_2569),
    .din4(tmp_data_7_V_fu_1937_p5),
    .dout(tmp_data_7_V_fu_1937_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U668(
    .din0(kernel_data_V_2_24),
    .din1(line_buffer_Array_V_2_0_8_q0),
    .din2(kernel_data_V_2_56),
    .din3(pool_window_3_V_13_reg_2578),
    .din4(tmp_data_8_V_fu_2003_p5),
    .dout(tmp_data_8_V_fu_2003_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U669(
    .din0(kernel_data_V_2_25),
    .din1(line_buffer_Array_V_2_0_9_q0),
    .din2(kernel_data_V_2_57),
    .din3(pool_window_3_V_14_reg_2587),
    .din4(tmp_data_9_V_fu_2069_p5),
    .dout(tmp_data_9_V_fu_2069_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U670(
    .din0(kernel_data_V_2_26),
    .din1(line_buffer_Array_V_2_0_10_q0),
    .din2(kernel_data_V_2_58),
    .din3(pool_window_3_V_15_reg_2596),
    .din4(tmp_data_10_V_fu_2135_p5),
    .dout(tmp_data_10_V_fu_2135_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U671(
    .din0(kernel_data_V_2_27),
    .din1(line_buffer_Array_V_2_0_11_q0),
    .din2(kernel_data_V_2_59),
    .din3(pool_window_3_V_16_reg_2605),
    .din4(tmp_data_11_V_fu_2201_p5),
    .dout(tmp_data_11_V_fu_2201_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U672(
    .din0(kernel_data_V_2_28),
    .din1(line_buffer_Array_V_2_0_12_q0),
    .din2(kernel_data_V_2_60),
    .din3(pool_window_3_V_17_reg_2614),
    .din4(tmp_data_12_V_fu_2267_p5),
    .dout(tmp_data_12_V_fu_2267_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U673(
    .din0(kernel_data_V_2_29),
    .din1(line_buffer_Array_V_2_0_13_q0),
    .din2(kernel_data_V_2_61),
    .din3(pool_window_3_V_18_reg_2623),
    .din4(tmp_data_13_V_fu_2333_p5),
    .dout(tmp_data_13_V_fu_2333_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U674(
    .din0(kernel_data_V_2_30),
    .din1(line_buffer_Array_V_2_0_14_q0),
    .din2(kernel_data_V_2_62),
    .din3(pool_window_3_V_19_reg_2632),
    .din4(tmp_data_14_V_fu_2399_p5),
    .dout(tmp_data_14_V_fu_2399_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U675(
    .din0(kernel_data_V_2_31),
    .din1(line_buffer_Array_V_2_0_15_q0),
    .din2(kernel_data_V_2_63),
    .din3(pool_window_3_V_20_reg_2641),
    .din4(tmp_data_15_V_fu_2465_p5),
    .dout(tmp_data_15_V_fu_2465_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_419)) begin
        if ((1'b1 == ap_condition_501)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_737 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_737 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_737;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_726 <= add_ln241_fu_754_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_726 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_488)) begin
        if ((icmp_ln212_fu_780_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_780_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_786_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_507)) begin
        if ((icmp_ln216_fu_804_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_804_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_810_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_492)) begin
        if ((icmp_ln212_reg_2498 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln212_reg_2498 == 1'd0)) begin
            sX_1 <= select_ln227_fu_934_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_2650 <= and_ln191_4_fu_922_p2;
        pool_window_3_V_10_reg_2551 <= data_V_data_5_V_dout;
        pool_window_3_V_11_reg_2560 <= data_V_data_6_V_dout;
        pool_window_3_V_12_reg_2569 <= data_V_data_7_V_dout;
        pool_window_3_V_13_reg_2578 <= data_V_data_8_V_dout;
        pool_window_3_V_14_reg_2587 <= data_V_data_9_V_dout;
        pool_window_3_V_15_reg_2596 <= data_V_data_10_V_dout;
        pool_window_3_V_16_reg_2605 <= data_V_data_11_V_dout;
        pool_window_3_V_17_reg_2614 <= data_V_data_12_V_dout;
        pool_window_3_V_18_reg_2623 <= data_V_data_13_V_dout;
        pool_window_3_V_19_reg_2632 <= data_V_data_14_V_dout;
        pool_window_3_V_20_reg_2641 <= data_V_data_15_V_dout;
        pool_window_3_V_6_reg_2515 <= data_V_data_1_V_dout;
        pool_window_3_V_7_reg_2524 <= data_V_data_2_V_dout;
        pool_window_3_V_8_reg_2533 <= data_V_data_3_V_dout;
        pool_window_3_V_9_reg_2542 <= data_V_data_4_V_dout;
        pool_window_3_V_reg_2506 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_748_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln191_5_reg_2488 <= icmp_ln191_5_fu_764_p2;
        icmp_ln191_6_reg_2493 <= icmp_ln191_6_fu_774_p2;
        icmp_ln212_reg_2498 <= icmp_ln212_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_780_p2 == 1'd1) & (icmp_ln241_fu_748_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_2502 <= icmp_ln216_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_reg_2479 <= icmp_ln241_fu_748_p2;
        icmp_ln241_reg_2479_pp0_iter1_reg <= icmp_ln241_reg_2479;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_data_V_2_16 <= line_buffer_Array_V_2_0_0_q0;
        kernel_data_V_2_17 <= line_buffer_Array_V_2_0_1_q0;
        kernel_data_V_2_18 <= line_buffer_Array_V_2_0_2_q0;
        kernel_data_V_2_19 <= line_buffer_Array_V_2_0_3_q0;
        kernel_data_V_2_20 <= line_buffer_Array_V_2_0_4_q0;
        kernel_data_V_2_21 <= line_buffer_Array_V_2_0_5_q0;
        kernel_data_V_2_22 <= line_buffer_Array_V_2_0_6_q0;
        kernel_data_V_2_23 <= line_buffer_Array_V_2_0_7_q0;
        kernel_data_V_2_24 <= line_buffer_Array_V_2_0_8_q0;
        kernel_data_V_2_25 <= line_buffer_Array_V_2_0_9_q0;
        kernel_data_V_2_26 <= line_buffer_Array_V_2_0_10_q0;
        kernel_data_V_2_27 <= line_buffer_Array_V_2_0_11_q0;
        kernel_data_V_2_28 <= line_buffer_Array_V_2_0_12_q0;
        kernel_data_V_2_29 <= line_buffer_Array_V_2_0_13_q0;
        kernel_data_V_2_30 <= line_buffer_Array_V_2_0_14_q0;
        kernel_data_V_2_31 <= line_buffer_Array_V_2_0_15_q0;
        kernel_data_V_2_48 <= pool_window_3_V_reg_2506;
        kernel_data_V_2_49 <= pool_window_3_V_6_reg_2515;
        kernel_data_V_2_50 <= pool_window_3_V_7_reg_2524;
        kernel_data_V_2_51 <= pool_window_3_V_8_reg_2533;
        kernel_data_V_2_52 <= pool_window_3_V_9_reg_2542;
        kernel_data_V_2_53 <= pool_window_3_V_10_reg_2551;
        kernel_data_V_2_54 <= pool_window_3_V_11_reg_2560;
        kernel_data_V_2_55 <= pool_window_3_V_12_reg_2569;
        kernel_data_V_2_56 <= pool_window_3_V_13_reg_2578;
        kernel_data_V_2_57 <= pool_window_3_V_14_reg_2587;
        kernel_data_V_2_58 <= pool_window_3_V_15_reg_2596;
        kernel_data_V_2_59 <= pool_window_3_V_16_reg_2605;
        kernel_data_V_2_60 <= pool_window_3_V_17_reg_2614;
        kernel_data_V_2_61 <= pool_window_3_V_18_reg_2623;
        kernel_data_V_2_62 <= pool_window_3_V_19_reg_2632;
        kernel_data_V_2_63 <= pool_window_3_V_20_reg_2641;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_2498 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY_1 <= ap_phi_mux_storemerge_i_i_phi_fu_741_p4;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_748_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_2498 == 1'd1) & (icmp_ln216_reg_2502 == 1'd0) & (icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_741_p4 = select_ln222_fu_960_p3;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_741_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_737;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_10_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_10_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_11_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_11_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_12_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_12_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_13_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_13_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_14_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_14_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_15_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_15_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_8_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_8_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_9_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2479_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_9_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2650) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2650) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_748_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_748_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_810_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_954_p2 = (sY_1 + 32'd1);

assign add_ln225_fu_786_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_928_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_754_p2 = (indvar_flatten_reg_726 + 6'd1);

assign and_ln191_3_fu_918_p2 = (icmp_ln191_6_reg_2493 & icmp_ln191_5_reg_2488);

assign and_ln191_4_fu_922_p2 = (and_ln191_fu_912_p2 & and_ln191_3_fu_918_p2);

assign and_ln191_fu_912_p2 = (icmp_ln191_fu_896_p2 & icmp_ln191_4_fu_906_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln191_4_reg_2650) & (io_acc_block_signal_op325 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_2479 == 1'd0) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln191_4_reg_2650) & (io_acc_block_signal_op325 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_2479 == 1'd0) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln191_4_reg_2650) & (io_acc_block_signal_op325 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_2479 == 1'd0) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln241_reg_2479 == 1'd0) & (io_acc_block_signal_op61 == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((1'd1 == and_ln191_4_reg_2650) & (io_acc_block_signal_op325 == 1'b0));
end

always @ (*) begin
    ap_condition_419 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_488 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_492 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_501 = ((icmp_ln216_fu_804_p2 == 1'd1) & (icmp_ln212_fu_780_p2 == 1'd1) & (icmp_ln241_fu_748_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_507 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_780_p2 == 1'd1) & (icmp_ln241_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_737 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_100_fu_1767_p2 = (($signed(kernel_data_V_2_53) < $signed(pool_window_3_V_10_reg_2551)) ? 1'b1 : 1'b0);

assign icmp_ln1496_101_fu_1787_p2 = (($signed(select_ln65_147_fu_1759_p3) < $signed(select_ln65_149_fu_1780_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_102_fu_1833_p2 = (($signed(kernel_data_V_2_54) < $signed(pool_window_3_V_11_reg_2560)) ? 1'b1 : 1'b0);

assign icmp_ln1496_103_fu_1853_p2 = (($signed(select_ln65_150_fu_1825_p3) < $signed(select_ln65_152_fu_1846_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_104_fu_1899_p2 = (($signed(kernel_data_V_2_55) < $signed(pool_window_3_V_12_reg_2569)) ? 1'b1 : 1'b0);

assign icmp_ln1496_105_fu_1919_p2 = (($signed(select_ln65_153_fu_1891_p3) < $signed(select_ln65_155_fu_1912_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_106_fu_1965_p2 = (($signed(kernel_data_V_2_56) < $signed(pool_window_3_V_13_reg_2578)) ? 1'b1 : 1'b0);

assign icmp_ln1496_107_fu_1985_p2 = (($signed(select_ln65_156_fu_1957_p3) < $signed(select_ln65_158_fu_1978_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_108_fu_2031_p2 = (($signed(kernel_data_V_2_57) < $signed(pool_window_3_V_14_reg_2587)) ? 1'b1 : 1'b0);

assign icmp_ln1496_109_fu_2051_p2 = (($signed(select_ln65_159_fu_2023_p3) < $signed(select_ln65_161_fu_2044_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_10_fu_2083_p2 = (($signed(kernel_data_V_2_26) < $signed(line_buffer_Array_V_2_0_10_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_110_fu_2097_p2 = (($signed(kernel_data_V_2_58) < $signed(pool_window_3_V_15_reg_2596)) ? 1'b1 : 1'b0);

assign icmp_ln1496_111_fu_2117_p2 = (($signed(select_ln65_162_fu_2089_p3) < $signed(select_ln65_164_fu_2110_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_112_fu_2163_p2 = (($signed(kernel_data_V_2_59) < $signed(pool_window_3_V_16_reg_2605)) ? 1'b1 : 1'b0);

assign icmp_ln1496_113_fu_2183_p2 = (($signed(select_ln65_165_fu_2155_p3) < $signed(select_ln65_167_fu_2176_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_114_fu_2229_p2 = (($signed(kernel_data_V_2_60) < $signed(pool_window_3_V_17_reg_2614)) ? 1'b1 : 1'b0);

assign icmp_ln1496_115_fu_2249_p2 = (($signed(select_ln65_168_fu_2221_p3) < $signed(select_ln65_170_fu_2242_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_116_fu_2295_p2 = (($signed(kernel_data_V_2_61) < $signed(pool_window_3_V_18_reg_2623)) ? 1'b1 : 1'b0);

assign icmp_ln1496_117_fu_2315_p2 = (($signed(select_ln65_171_fu_2287_p3) < $signed(select_ln65_173_fu_2308_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_118_fu_2361_p2 = (($signed(kernel_data_V_2_62) < $signed(pool_window_3_V_19_reg_2632)) ? 1'b1 : 1'b0);

assign icmp_ln1496_119_fu_2381_p2 = (($signed(select_ln65_174_fu_2353_p3) < $signed(select_ln65_176_fu_2374_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_2149_p2 = (($signed(kernel_data_V_2_27) < $signed(line_buffer_Array_V_2_0_11_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_120_fu_2413_p2 = (($signed(kernel_data_V_2_31) < $signed(line_buffer_Array_V_2_0_15_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_121_fu_2427_p2 = (($signed(kernel_data_V_2_63) < $signed(pool_window_3_V_20_reg_2641)) ? 1'b1 : 1'b0);

assign icmp_ln1496_122_fu_2447_p2 = (($signed(select_ln65_177_fu_2419_p3) < $signed(select_ln65_179_fu_2440_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_2215_p2 = (($signed(kernel_data_V_2_28) < $signed(line_buffer_Array_V_2_0_12_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_2281_p2 = (($signed(kernel_data_V_2_29) < $signed(line_buffer_Array_V_2_0_13_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_2347_p2 = (($signed(kernel_data_V_2_30) < $signed(line_buffer_Array_V_2_0_14_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_1489_p2 = (($signed(kernel_data_V_2_17) < $signed(line_buffer_Array_V_2_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1555_p2 = (($signed(kernel_data_V_2_18) < $signed(line_buffer_Array_V_2_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_1621_p2 = (($signed(kernel_data_V_2_19) < $signed(line_buffer_Array_V_2_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_1687_p2 = (($signed(kernel_data_V_2_20) < $signed(line_buffer_Array_V_2_0_4_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_1753_p2 = (($signed(kernel_data_V_2_21) < $signed(line_buffer_Array_V_2_0_5_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_1819_p2 = (($signed(kernel_data_V_2_22) < $signed(line_buffer_Array_V_2_0_6_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1885_p2 = (($signed(kernel_data_V_2_23) < $signed(line_buffer_Array_V_2_0_7_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_1951_p2 = (($signed(kernel_data_V_2_24) < $signed(line_buffer_Array_V_2_0_8_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_90_fu_1437_p2 = (($signed(kernel_data_V_2_48) < $signed(pool_window_3_V_reg_2506)) ? 1'b1 : 1'b0);

assign icmp_ln1496_91_fu_1457_p2 = (($signed(select_ln65_fu_1429_p3) < $signed(select_ln65_133_fu_1450_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_92_fu_1503_p2 = (($signed(kernel_data_V_2_49) < $signed(pool_window_3_V_6_reg_2515)) ? 1'b1 : 1'b0);

assign icmp_ln1496_93_fu_1523_p2 = (($signed(select_ln65_135_fu_1495_p3) < $signed(select_ln65_137_fu_1516_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_94_fu_1569_p2 = (($signed(kernel_data_V_2_50) < $signed(pool_window_3_V_7_reg_2524)) ? 1'b1 : 1'b0);

assign icmp_ln1496_95_fu_1589_p2 = (($signed(select_ln65_138_fu_1561_p3) < $signed(select_ln65_140_fu_1582_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_96_fu_1635_p2 = (($signed(kernel_data_V_2_51) < $signed(pool_window_3_V_8_reg_2533)) ? 1'b1 : 1'b0);

assign icmp_ln1496_97_fu_1655_p2 = (($signed(select_ln65_141_fu_1627_p3) < $signed(select_ln65_143_fu_1648_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_98_fu_1701_p2 = (($signed(kernel_data_V_2_52) < $signed(pool_window_3_V_9_reg_2542)) ? 1'b1 : 1'b0);

assign icmp_ln1496_99_fu_1721_p2 = (($signed(select_ln65_144_fu_1693_p3) < $signed(select_ln65_146_fu_1714_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_2017_p2 = (($signed(kernel_data_V_2_25) < $signed(line_buffer_Array_V_2_0_9_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1423_p2 = (($signed(kernel_data_V_2_16) < $signed(line_buffer_Array_V_2_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_906_p2 = ((sY_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_764_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_774_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_896_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_780_p2 = ((pX_1 == 32'd6) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_804_p2 = ((pY_1 == 32'd6) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_748_p2 = ((indvar_flatten_reg_726 == 6'd49) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op325 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op61 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_fu_1475_p6;

assign res_V_data_10_V_din = tmp_data_10_V_fu_2135_p6;

assign res_V_data_11_V_din = tmp_data_11_V_fu_2201_p6;

assign res_V_data_12_V_din = tmp_data_12_V_fu_2267_p6;

assign res_V_data_13_V_din = tmp_data_13_V_fu_2333_p6;

assign res_V_data_14_V_din = tmp_data_14_V_fu_2399_p6;

assign res_V_data_15_V_din = tmp_data_15_V_fu_2465_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_1541_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_1607_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_1673_p6;

assign res_V_data_4_V_din = tmp_data_4_V_fu_1739_p6;

assign res_V_data_5_V_din = tmp_data_5_V_fu_1805_p6;

assign res_V_data_6_V_din = tmp_data_6_V_fu_1871_p6;

assign res_V_data_7_V_din = tmp_data_7_V_fu_1937_p6;

assign res_V_data_8_V_din = tmp_data_8_V_fu_2003_p6;

assign res_V_data_9_V_din = tmp_data_9_V_fu_2069_p6;

assign select_ln222_fu_960_p3 = ((icmp_ln191_4_fu_906_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_954_p2);

assign select_ln227_fu_934_p3 = ((icmp_ln191_fu_896_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_928_p2);

assign select_ln65_132_fu_1442_p3 = ((icmp_ln1496_90_fu_1437_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_133_fu_1450_p3 = ((icmp_ln1496_90_fu_1437_p2[0:0] === 1'b1) ? pool_window_3_V_reg_2506 : kernel_data_V_2_48);

assign select_ln65_135_fu_1495_p3 = ((icmp_ln1496_1_fu_1489_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_1_q0 : kernel_data_V_2_17);

assign select_ln65_136_fu_1508_p3 = ((icmp_ln1496_92_fu_1503_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_137_fu_1516_p3 = ((icmp_ln1496_92_fu_1503_p2[0:0] === 1'b1) ? pool_window_3_V_6_reg_2515 : kernel_data_V_2_49);

assign select_ln65_138_fu_1561_p3 = ((icmp_ln1496_2_fu_1555_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_2_q0 : kernel_data_V_2_18);

assign select_ln65_140_fu_1582_p3 = ((icmp_ln1496_94_fu_1569_p2[0:0] === 1'b1) ? pool_window_3_V_7_reg_2524 : kernel_data_V_2_50);

assign select_ln65_141_fu_1627_p3 = ((icmp_ln1496_3_fu_1621_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_3_q0 : kernel_data_V_2_19);

assign select_ln65_142_fu_1574_p3 = ((icmp_ln1496_94_fu_1569_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_143_fu_1648_p3 = ((icmp_ln1496_96_fu_1635_p2[0:0] === 1'b1) ? pool_window_3_V_8_reg_2533 : kernel_data_V_2_51);

assign select_ln65_144_fu_1693_p3 = ((icmp_ln1496_4_fu_1687_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_4_q0 : kernel_data_V_2_20);

assign select_ln65_146_fu_1714_p3 = ((icmp_ln1496_98_fu_1701_p2[0:0] === 1'b1) ? pool_window_3_V_9_reg_2542 : kernel_data_V_2_52);

assign select_ln65_147_fu_1759_p3 = ((icmp_ln1496_5_fu_1753_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_5_q0 : kernel_data_V_2_21);

assign select_ln65_148_fu_1640_p3 = ((icmp_ln1496_96_fu_1635_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_149_fu_1780_p3 = ((icmp_ln1496_100_fu_1767_p2[0:0] === 1'b1) ? pool_window_3_V_10_reg_2551 : kernel_data_V_2_53);

assign select_ln65_150_fu_1825_p3 = ((icmp_ln1496_6_fu_1819_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_6_q0 : kernel_data_V_2_22);

assign select_ln65_152_fu_1846_p3 = ((icmp_ln1496_102_fu_1833_p2[0:0] === 1'b1) ? pool_window_3_V_11_reg_2560 : kernel_data_V_2_54);

assign select_ln65_153_fu_1891_p3 = ((icmp_ln1496_7_fu_1885_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_7_q0 : kernel_data_V_2_23);

assign select_ln65_154_fu_1706_p3 = ((icmp_ln1496_98_fu_1701_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_155_fu_1912_p3 = ((icmp_ln1496_104_fu_1899_p2[0:0] === 1'b1) ? pool_window_3_V_12_reg_2569 : kernel_data_V_2_55);

assign select_ln65_156_fu_1957_p3 = ((icmp_ln1496_8_fu_1951_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_8_q0 : kernel_data_V_2_24);

assign select_ln65_158_fu_1978_p3 = ((icmp_ln1496_106_fu_1965_p2[0:0] === 1'b1) ? pool_window_3_V_13_reg_2578 : kernel_data_V_2_56);

assign select_ln65_159_fu_2023_p3 = ((icmp_ln1496_9_fu_2017_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_9_q0 : kernel_data_V_2_25);

assign select_ln65_160_fu_1772_p3 = ((icmp_ln1496_100_fu_1767_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_161_fu_2044_p3 = ((icmp_ln1496_108_fu_2031_p2[0:0] === 1'b1) ? pool_window_3_V_14_reg_2587 : kernel_data_V_2_57);

assign select_ln65_162_fu_2089_p3 = ((icmp_ln1496_10_fu_2083_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_10_q0 : kernel_data_V_2_26);

assign select_ln65_164_fu_2110_p3 = ((icmp_ln1496_110_fu_2097_p2[0:0] === 1'b1) ? pool_window_3_V_15_reg_2596 : kernel_data_V_2_58);

assign select_ln65_165_fu_2155_p3 = ((icmp_ln1496_11_fu_2149_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_11_q0 : kernel_data_V_2_27);

assign select_ln65_166_fu_1838_p3 = ((icmp_ln1496_102_fu_1833_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_167_fu_2176_p3 = ((icmp_ln1496_112_fu_2163_p2[0:0] === 1'b1) ? pool_window_3_V_16_reg_2605 : kernel_data_V_2_59);

assign select_ln65_168_fu_2221_p3 = ((icmp_ln1496_12_fu_2215_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_12_q0 : kernel_data_V_2_28);

assign select_ln65_170_fu_2242_p3 = ((icmp_ln1496_114_fu_2229_p2[0:0] === 1'b1) ? pool_window_3_V_17_reg_2614 : kernel_data_V_2_60);

assign select_ln65_171_fu_2287_p3 = ((icmp_ln1496_13_fu_2281_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_13_q0 : kernel_data_V_2_29);

assign select_ln65_172_fu_1904_p3 = ((icmp_ln1496_104_fu_1899_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_173_fu_2308_p3 = ((icmp_ln1496_116_fu_2295_p2[0:0] === 1'b1) ? pool_window_3_V_18_reg_2623 : kernel_data_V_2_61);

assign select_ln65_174_fu_2353_p3 = ((icmp_ln1496_14_fu_2347_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_14_q0 : kernel_data_V_2_30);

assign select_ln65_176_fu_2374_p3 = ((icmp_ln1496_118_fu_2361_p2[0:0] === 1'b1) ? pool_window_3_V_19_reg_2632 : kernel_data_V_2_62);

assign select_ln65_177_fu_2419_p3 = ((icmp_ln1496_120_fu_2413_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_15_q0 : kernel_data_V_2_31);

assign select_ln65_178_fu_1970_p3 = ((icmp_ln1496_106_fu_1965_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_179_fu_2440_p3 = ((icmp_ln1496_121_fu_2427_p2[0:0] === 1'b1) ? pool_window_3_V_20_reg_2641 : kernel_data_V_2_63);

assign select_ln65_181_fu_2036_p3 = ((icmp_ln1496_108_fu_2031_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_183_fu_2102_p3 = ((icmp_ln1496_110_fu_2097_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_185_fu_2168_p3 = ((icmp_ln1496_112_fu_2163_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_187_fu_2234_p3 = ((icmp_ln1496_114_fu_2229_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_189_fu_2300_p3 = ((icmp_ln1496_116_fu_2295_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_191_fu_2366_p3 = ((icmp_ln1496_118_fu_2361_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_193_fu_2432_p3 = ((icmp_ln1496_121_fu_2427_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_fu_1429_p3 = ((icmp_ln1496_fu_1423_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_0_q0 : kernel_data_V_2_16);

assign start_out = real_start;

assign tmp_data_0_V_fu_1475_p5 = ((icmp_ln1496_91_fu_1457_p2[0:0] === 1'b1) ? select_ln65_132_fu_1442_p3 : zext_ln65_fu_1463_p1);

assign tmp_data_10_V_fu_2135_p5 = ((icmp_ln1496_111_fu_2117_p2[0:0] === 1'b1) ? select_ln65_183_fu_2102_p3 : zext_ln65_27_fu_2123_p1);

assign tmp_data_11_V_fu_2201_p5 = ((icmp_ln1496_113_fu_2183_p2[0:0] === 1'b1) ? select_ln65_185_fu_2168_p3 : zext_ln65_28_fu_2189_p1);

assign tmp_data_12_V_fu_2267_p5 = ((icmp_ln1496_115_fu_2249_p2[0:0] === 1'b1) ? select_ln65_187_fu_2234_p3 : zext_ln65_29_fu_2255_p1);

assign tmp_data_13_V_fu_2333_p5 = ((icmp_ln1496_117_fu_2315_p2[0:0] === 1'b1) ? select_ln65_189_fu_2300_p3 : zext_ln65_30_fu_2321_p1);

assign tmp_data_14_V_fu_2399_p5 = ((icmp_ln1496_119_fu_2381_p2[0:0] === 1'b1) ? select_ln65_191_fu_2366_p3 : zext_ln65_31_fu_2387_p1);

assign tmp_data_15_V_fu_2465_p5 = ((icmp_ln1496_122_fu_2447_p2[0:0] === 1'b1) ? select_ln65_193_fu_2432_p3 : zext_ln65_32_fu_2453_p1);

assign tmp_data_1_V_fu_1541_p5 = ((icmp_ln1496_93_fu_1523_p2[0:0] === 1'b1) ? select_ln65_136_fu_1508_p3 : zext_ln65_18_fu_1529_p1);

assign tmp_data_2_V_fu_1607_p5 = ((icmp_ln1496_95_fu_1589_p2[0:0] === 1'b1) ? select_ln65_142_fu_1574_p3 : zext_ln65_19_fu_1595_p1);

assign tmp_data_3_V_fu_1673_p5 = ((icmp_ln1496_97_fu_1655_p2[0:0] === 1'b1) ? select_ln65_148_fu_1640_p3 : zext_ln65_20_fu_1661_p1);

assign tmp_data_4_V_fu_1739_p5 = ((icmp_ln1496_99_fu_1721_p2[0:0] === 1'b1) ? select_ln65_154_fu_1706_p3 : zext_ln65_21_fu_1727_p1);

assign tmp_data_5_V_fu_1805_p5 = ((icmp_ln1496_101_fu_1787_p2[0:0] === 1'b1) ? select_ln65_160_fu_1772_p3 : zext_ln65_22_fu_1793_p1);

assign tmp_data_6_V_fu_1871_p5 = ((icmp_ln1496_103_fu_1853_p2[0:0] === 1'b1) ? select_ln65_166_fu_1838_p3 : zext_ln65_23_fu_1859_p1);

assign tmp_data_7_V_fu_1937_p5 = ((icmp_ln1496_105_fu_1919_p2[0:0] === 1'b1) ? select_ln65_172_fu_1904_p3 : zext_ln65_24_fu_1925_p1);

assign tmp_data_8_V_fu_2003_p5 = ((icmp_ln1496_107_fu_1985_p2[0:0] === 1'b1) ? select_ln65_178_fu_1970_p3 : zext_ln65_25_fu_1991_p1);

assign tmp_data_9_V_fu_2069_p5 = ((icmp_ln1496_109_fu_2051_p2[0:0] === 1'b1) ? select_ln65_181_fu_2036_p3 : zext_ln65_26_fu_2057_p1);

assign zext_ln65_18_fu_1529_p1 = icmp_ln1496_1_fu_1489_p2;

assign zext_ln65_19_fu_1595_p1 = icmp_ln1496_2_fu_1555_p2;

assign zext_ln65_20_fu_1661_p1 = icmp_ln1496_3_fu_1621_p2;

assign zext_ln65_21_fu_1727_p1 = icmp_ln1496_4_fu_1687_p2;

assign zext_ln65_22_fu_1793_p1 = icmp_ln1496_5_fu_1753_p2;

assign zext_ln65_23_fu_1859_p1 = icmp_ln1496_6_fu_1819_p2;

assign zext_ln65_24_fu_1925_p1 = icmp_ln1496_7_fu_1885_p2;

assign zext_ln65_25_fu_1991_p1 = icmp_ln1496_8_fu_1951_p2;

assign zext_ln65_26_fu_2057_p1 = icmp_ln1496_9_fu_2017_p2;

assign zext_ln65_27_fu_2123_p1 = icmp_ln1496_10_fu_2083_p2;

assign zext_ln65_28_fu_2189_p1 = icmp_ln1496_11_fu_2149_p2;

assign zext_ln65_29_fu_2255_p1 = icmp_ln1496_12_fu_2215_p2;

assign zext_ln65_30_fu_2321_p1 = icmp_ln1496_13_fu_2281_p2;

assign zext_ln65_31_fu_2387_p1 = icmp_ln1496_14_fu_2347_p2;

assign zext_ln65_32_fu_2453_p1 = icmp_ln1496_120_fu_2413_p2;

assign zext_ln65_fu_1463_p1 = icmp_ln1496_fu_1423_p2;

endmodule //pooling2d_cl_array_array_ap_fixed_16_2_5_3_0_16u_config10_s
