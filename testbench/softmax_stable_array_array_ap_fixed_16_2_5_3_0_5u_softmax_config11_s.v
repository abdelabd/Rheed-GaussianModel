// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_2_5_3_0_5u_softmax_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state10_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [9:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [12:0] exp_table3_q0;
wire   [9:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [17:0] invert_table4_q0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg  signed [15:0] data_array_0_V_reg_907;
wire    io_acc_block_signal_op13;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_1_V_reg_912;
reg  signed [15:0] data_array_2_V_reg_917;
reg  signed [15:0] data_array_3_V_reg_922;
reg  signed [15:0] data_array_4_V_reg_927;
wire   [15:0] select_ln65_2_fu_327_p3;
reg   [15:0] select_ln65_2_reg_934;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [9:0] y_V_1_fu_689_p3;
reg   [9:0] y_V_1_reg_945;
wire   [9:0] y_V_2_fu_723_p3;
reg   [9:0] y_V_2_reg_950;
wire   [9:0] y_V_3_fu_757_p3;
reg   [9:0] y_V_3_reg_955;
wire   [9:0] y_V_4_fu_791_p3;
reg   [9:0] y_V_4_reg_960;
reg   [12:0] exp_res_0_V_reg_965;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [12:0] exp_res_1_V_reg_976;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [12:0] exp_res_2_V_reg_987;
reg   [12:0] exp_res_3_V_reg_998;
reg   [12:0] exp_res_4_V_reg_1009;
wire  signed [21:0] sext_ln241_fu_882_p1;
reg  signed [21:0] sext_ln241_reg_1019;
reg   [15:0] tmp_data_0_V_reg_1024;
reg   [15:0] tmp_data_1_V_reg_1029;
reg   [15:0] tmp_data_2_V_reg_1034;
reg   [15:0] tmp_data_3_V_reg_1039;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln225_fu_658_p1;
wire   [63:0] zext_ln225_1_fu_799_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln225_2_fu_803_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_3_fu_807_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_4_fu_811_p1;
wire   [63:0] zext_ln235_fu_877_p1;
wire    ap_block_pp0_stage1_01001;
reg   [12:0] grp_fu_239_p0;
wire   [21:0] zext_ln1118_fu_887_p1;
wire   [21:0] zext_ln1118_1_fu_891_p1;
wire   [21:0] zext_ln1118_2_fu_895_p1;
wire   [21:0] zext_ln1118_3_fu_899_p1;
wire   [21:0] zext_ln1118_4_fu_903_p1;
reg  signed [17:0] grp_fu_239_p1;
wire   [21:0] grp_fu_239_p2;
wire  signed [15:0] icmp_ln1496_fu_293_p0;
wire  signed [15:0] icmp_ln1496_fu_293_p1;
wire   [0:0] icmp_ln1496_fu_293_p2;
wire  signed [15:0] select_ln65_fu_299_p1;
wire  signed [15:0] select_ln65_fu_299_p2;
wire  signed [15:0] icmp_ln1496_1_fu_307_p0;
wire  signed [15:0] icmp_ln1496_1_fu_307_p1;
wire   [0:0] icmp_ln1496_1_fu_307_p2;
wire  signed [15:0] select_ln65_1_fu_313_p1;
wire  signed [15:0] select_ln65_1_fu_313_p2;
wire   [15:0] select_ln65_fu_299_p3;
wire   [15:0] select_ln65_1_fu_313_p3;
wire   [0:0] icmp_ln1496_2_fu_321_p2;
wire   [0:0] icmp_ln1496_3_fu_335_p2;
wire   [15:0] x_max_V_fu_339_p3;
wire  signed [16:0] sext_ln703_fu_345_p1;
wire  signed [16:0] sext_ln703_1_fu_348_p1;
wire   [16:0] sub_ln1193_fu_352_p2;
wire   [0:0] tmp_11_fu_366_p3;
wire   [0:0] tmp_10_fu_358_p3;
wire   [0:0] xor_ln786_fu_374_p2;
wire   [0:0] xor_ln340_fu_392_p2;
wire  signed [16:0] sext_ln703_2_fu_404_p1;
wire   [16:0] sub_ln1193_1_fu_407_p2;
wire   [0:0] tmp_13_fu_421_p3;
wire   [0:0] tmp_12_fu_413_p3;
wire   [0:0] xor_ln786_1_fu_429_p2;
wire   [0:0] xor_ln340_1_fu_447_p2;
wire  signed [16:0] sext_ln703_3_fu_459_p1;
wire   [16:0] sub_ln1193_2_fu_462_p2;
wire   [0:0] tmp_15_fu_476_p3;
wire   [0:0] tmp_14_fu_468_p3;
wire   [0:0] xor_ln786_2_fu_484_p2;
wire   [0:0] xor_ln340_2_fu_502_p2;
wire  signed [16:0] sext_ln703_4_fu_514_p1;
wire   [16:0] sub_ln1193_3_fu_517_p2;
wire   [0:0] tmp_17_fu_531_p3;
wire   [0:0] tmp_16_fu_523_p3;
wire   [0:0] xor_ln786_3_fu_539_p2;
wire   [0:0] xor_ln340_3_fu_557_p2;
wire  signed [16:0] sext_ln703_5_fu_569_p1;
wire   [16:0] sub_ln1193_4_fu_572_p2;
wire   [0:0] tmp_19_fu_586_p3;
wire   [0:0] tmp_18_fu_578_p3;
wire   [0:0] xor_ln786_4_fu_594_p2;
wire   [0:0] xor_ln340_4_fu_612_p2;
wire   [0:0] xor_ln340_5_fu_386_p2;
wire   [9:0] tmp_fu_624_p4;
wire   [0:0] and_ln786_fu_380_p2;
wire   [0:0] or_ln340_fu_398_p2;
wire   [9:0] select_ln340_fu_634_p3;
wire   [9:0] select_ln388_fu_642_p3;
wire   [9:0] y_V_fu_650_p3;
wire   [0:0] xor_ln340_6_fu_441_p2;
wire   [9:0] tmp_8_fu_663_p4;
wire   [0:0] and_ln786_1_fu_435_p2;
wire   [0:0] or_ln340_1_fu_453_p2;
wire   [9:0] select_ln340_2_fu_673_p3;
wire   [9:0] select_ln388_1_fu_681_p3;
wire   [0:0] xor_ln340_7_fu_496_p2;
wire   [9:0] tmp_s_fu_697_p4;
wire   [0:0] and_ln786_2_fu_490_p2;
wire   [0:0] or_ln340_2_fu_508_p2;
wire   [9:0] select_ln340_4_fu_707_p3;
wire   [9:0] select_ln388_2_fu_715_p3;
wire   [0:0] xor_ln340_8_fu_551_p2;
wire   [9:0] tmp_7_fu_731_p4;
wire   [0:0] and_ln786_3_fu_545_p2;
wire   [0:0] or_ln340_3_fu_563_p2;
wire   [9:0] select_ln340_6_fu_741_p3;
wire   [9:0] select_ln388_3_fu_749_p3;
wire   [0:0] xor_ln340_9_fu_606_p2;
wire   [9:0] tmp_9_fu_765_p4;
wire   [0:0] and_ln786_4_fu_600_p2;
wire   [0:0] or_ln340_4_fu_618_p2;
wire   [9:0] select_ln340_8_fu_775_p3;
wire   [9:0] select_ln388_4_fu_783_p3;
wire   [13:0] zext_ln43_1_fu_818_p1;
wire   [13:0] zext_ln43_fu_815_p1;
wire   [13:0] p_Val2_6_fu_821_p2;
wire   [13:0] zext_ln700_fu_834_p1;
wire   [13:0] zext_ln43_2_fu_831_p1;
wire   [13:0] p_Val2_7_fu_837_p2;
wire   [14:0] zext_ln703_1_fu_843_p1;
wire   [14:0] zext_ln703_fu_827_p1;
wire   [14:0] p_Val2_8_fu_847_p2;
wire   [15:0] zext_ln703_2_fu_853_p1;
wire   [15:0] zext_ln36_fu_857_p1;
wire   [15:0] p_Val2_9_fu_861_p2;
wire   [7:0] tmp_20_fu_867_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_2_5_3_0_5u_softmax_config11_s_exp_table3 #(
    .DataWidth( 13 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0)
);

softmax_stable_array_array_ap_fixed_16_2_5_3_0_5u_softmax_config11_s_invert_txdS #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_907 <= data_V_data_0_V_dout;
        data_array_1_V_reg_912 <= data_V_data_1_V_dout;
        data_array_2_V_reg_917 <= data_V_data_2_V_dout;
        data_array_3_V_reg_922 <= data_V_data_3_V_dout;
        data_array_4_V_reg_927 <= data_V_data_4_V_dout;
        select_ln65_2_reg_934 <= select_ln65_2_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        exp_res_0_V_reg_965 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        exp_res_1_V_reg_976 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_reg_987 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_3_V_reg_998 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        exp_res_4_V_reg_1009 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sext_ln241_reg_1019 <= sext_ln241_fu_882_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_data_0_V_reg_1024 <= {{grp_fu_239_p2[21:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_data_1_V_reg_1029 <= {{grp_fu_239_p2[21:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_data_2_V_reg_1034 <= {{grp_fu_239_p2[21:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_3_V_reg_1039 <= {{grp_fu_239_p2[21:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        y_V_1_reg_945 <= y_V_1_fu_689_p3;
        y_V_2_reg_950 <= y_V_2_fu_723_p3;
        y_V_3_reg_955 <= y_V_3_fu_757_p3;
        y_V_4_reg_960 <= y_V_4_fu_791_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_address0 = zext_ln225_4_fu_811_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table3_address0 = zext_ln225_3_fu_807_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_table3_address0 = zext_ln225_2_fu_803_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table3_address0 = zext_ln225_1_fu_799_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        exp_table3_address0 = zext_ln225_fu_658_p1;
    end else begin
        exp_table3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_239_p0 = zext_ln1118_4_fu_903_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_239_p0 = zext_ln1118_3_fu_899_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_239_p0 = zext_ln1118_2_fu_895_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_239_p0 = zext_ln1118_1_fu_891_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_239_p0 = zext_ln1118_fu_887_p1;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        grp_fu_239_p1 = sext_ln241_reg_1019;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_239_p1 = sext_ln241_fu_882_p1;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_435_p2 = (xor_ln786_1_fu_429_p2 & tmp_12_fu_413_p3);

assign and_ln786_2_fu_490_p2 = (xor_ln786_2_fu_484_p2 & tmp_14_fu_468_p3);

assign and_ln786_3_fu_545_p2 = (xor_ln786_3_fu_539_p2 & tmp_16_fu_523_p3);

assign and_ln786_4_fu_600_p2 = (xor_ln786_4_fu_594_p2 & tmp_18_fu_578_p3);

assign and_ln786_fu_380_p2 = (xor_ln786_fu_374_p2 & tmp_10_fu_358_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op13 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op13 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op13 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_239_p2 = ($signed({{1'b0}, {grp_fu_239_p0}}) * $signed(grp_fu_239_p1));

assign icmp_ln1496_1_fu_307_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_307_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_307_p2 = (($signed(icmp_ln1496_1_fu_307_p0) < $signed(icmp_ln1496_1_fu_307_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_321_p2 = (($signed(select_ln65_fu_299_p3) < $signed(select_ln65_1_fu_313_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_335_p2 = (($signed(select_ln65_2_reg_934) < $signed(data_array_4_V_reg_927)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_293_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_293_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_293_p2 = (($signed(icmp_ln1496_fu_293_p0) < $signed(icmp_ln1496_fu_293_p1)) ? 1'b1 : 1'b0);

assign invert_table4_address0 = zext_ln235_fu_877_p1;

assign io_acc_block_signal_op13 = (data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_1_fu_453_p2 = (xor_ln340_1_fu_447_p2 | tmp_13_fu_421_p3);

assign or_ln340_2_fu_508_p2 = (xor_ln340_2_fu_502_p2 | tmp_15_fu_476_p3);

assign or_ln340_3_fu_563_p2 = (xor_ln340_3_fu_557_p2 | tmp_17_fu_531_p3);

assign or_ln340_4_fu_618_p2 = (xor_ln340_4_fu_612_p2 | tmp_19_fu_586_p3);

assign or_ln340_fu_398_p2 = (xor_ln340_fu_392_p2 | tmp_11_fu_366_p3);

assign p_Val2_6_fu_821_p2 = (zext_ln43_1_fu_818_p1 + zext_ln43_fu_815_p1);

assign p_Val2_7_fu_837_p2 = (zext_ln700_fu_834_p1 + zext_ln43_2_fu_831_p1);

assign p_Val2_8_fu_847_p2 = (zext_ln703_1_fu_843_p1 + zext_ln703_fu_827_p1);

assign p_Val2_9_fu_861_p2 = (zext_ln703_2_fu_853_p1 + zext_ln36_fu_857_p1);

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_1024;

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_1029;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_1034;

assign res_V_data_3_V_TDATA = tmp_data_3_V_reg_1039;

assign res_V_data_4_V_TDATA = {{grp_fu_239_p2[21:6]}};

assign select_ln340_2_fu_673_p3 = ((xor_ln340_6_fu_441_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_663_p4);

assign select_ln340_4_fu_707_p3 = ((xor_ln340_7_fu_496_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_fu_697_p4);

assign select_ln340_6_fu_741_p3 = ((xor_ln340_8_fu_551_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_fu_731_p4);

assign select_ln340_8_fu_775_p3 = ((xor_ln340_9_fu_606_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_fu_765_p4);

assign select_ln340_fu_634_p3 = ((xor_ln340_5_fu_386_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_624_p4);

assign select_ln388_1_fu_681_p3 = ((and_ln786_1_fu_435_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_663_p4);

assign select_ln388_2_fu_715_p3 = ((and_ln786_2_fu_490_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_fu_697_p4);

assign select_ln388_3_fu_749_p3 = ((and_ln786_3_fu_545_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_fu_731_p4);

assign select_ln388_4_fu_783_p3 = ((and_ln786_4_fu_600_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_765_p4);

assign select_ln388_fu_642_p3 = ((and_ln786_fu_380_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_624_p4);

assign select_ln65_1_fu_313_p1 = data_V_data_3_V_dout;

assign select_ln65_1_fu_313_p2 = data_V_data_2_V_dout;

assign select_ln65_1_fu_313_p3 = ((icmp_ln1496_1_fu_307_p2[0:0] === 1'b1) ? select_ln65_1_fu_313_p1 : select_ln65_1_fu_313_p2);

assign select_ln65_2_fu_327_p3 = ((icmp_ln1496_2_fu_321_p2[0:0] === 1'b1) ? select_ln65_1_fu_313_p3 : select_ln65_fu_299_p3);

assign select_ln65_fu_299_p1 = data_V_data_1_V_dout;

assign select_ln65_fu_299_p2 = data_V_data_0_V_dout;

assign select_ln65_fu_299_p3 = ((icmp_ln1496_fu_293_p2[0:0] === 1'b1) ? select_ln65_fu_299_p1 : select_ln65_fu_299_p2);

assign sext_ln241_fu_882_p1 = $signed(invert_table4_q0);

assign sext_ln703_1_fu_348_p1 = $signed(x_max_V_fu_339_p3);

assign sext_ln703_2_fu_404_p1 = data_array_1_V_reg_912;

assign sext_ln703_3_fu_459_p1 = data_array_2_V_reg_917;

assign sext_ln703_4_fu_514_p1 = data_array_3_V_reg_922;

assign sext_ln703_5_fu_569_p1 = data_array_4_V_reg_927;

assign sext_ln703_fu_345_p1 = data_array_0_V_reg_907;

assign sub_ln1193_1_fu_407_p2 = ($signed(sext_ln703_2_fu_404_p1) - $signed(sext_ln703_1_fu_348_p1));

assign sub_ln1193_2_fu_462_p2 = ($signed(sext_ln703_3_fu_459_p1) - $signed(sext_ln703_1_fu_348_p1));

assign sub_ln1193_3_fu_517_p2 = ($signed(sext_ln703_4_fu_514_p1) - $signed(sext_ln703_1_fu_348_p1));

assign sub_ln1193_4_fu_572_p2 = ($signed(sext_ln703_5_fu_569_p1) - $signed(sext_ln703_1_fu_348_p1));

assign sub_ln1193_fu_352_p2 = ($signed(sext_ln703_fu_345_p1) - $signed(sext_ln703_1_fu_348_p1));

assign tmp_10_fu_358_p3 = sub_ln1193_fu_352_p2[32'd16];

assign tmp_11_fu_366_p3 = sub_ln1193_fu_352_p2[32'd15];

assign tmp_12_fu_413_p3 = sub_ln1193_1_fu_407_p2[32'd16];

assign tmp_13_fu_421_p3 = sub_ln1193_1_fu_407_p2[32'd15];

assign tmp_14_fu_468_p3 = sub_ln1193_2_fu_462_p2[32'd16];

assign tmp_15_fu_476_p3 = sub_ln1193_2_fu_462_p2[32'd15];

assign tmp_16_fu_523_p3 = sub_ln1193_3_fu_517_p2[32'd16];

assign tmp_17_fu_531_p3 = sub_ln1193_3_fu_517_p2[32'd15];

assign tmp_18_fu_578_p3 = sub_ln1193_4_fu_572_p2[32'd16];

assign tmp_19_fu_586_p3 = sub_ln1193_4_fu_572_p2[32'd15];

assign tmp_20_fu_867_p4 = {{p_Val2_9_fu_861_p2[15:8]}};

assign tmp_7_fu_731_p4 = {{sub_ln1193_3_fu_517_p2[15:6]}};

assign tmp_8_fu_663_p4 = {{sub_ln1193_1_fu_407_p2[15:6]}};

assign tmp_9_fu_765_p4 = {{sub_ln1193_4_fu_572_p2[15:6]}};

assign tmp_fu_624_p4 = {{sub_ln1193_fu_352_p2[15:6]}};

assign tmp_s_fu_697_p4 = {{sub_ln1193_2_fu_462_p2[15:6]}};

assign x_max_V_fu_339_p3 = ((icmp_ln1496_3_fu_335_p2[0:0] === 1'b1) ? data_array_4_V_reg_927 : select_ln65_2_reg_934);

assign xor_ln340_1_fu_447_p2 = (tmp_12_fu_413_p3 ^ 1'd1);

assign xor_ln340_2_fu_502_p2 = (tmp_14_fu_468_p3 ^ 1'd1);

assign xor_ln340_3_fu_557_p2 = (tmp_16_fu_523_p3 ^ 1'd1);

assign xor_ln340_4_fu_612_p2 = (tmp_18_fu_578_p3 ^ 1'd1);

assign xor_ln340_5_fu_386_p2 = (tmp_11_fu_366_p3 ^ tmp_10_fu_358_p3);

assign xor_ln340_6_fu_441_p2 = (tmp_13_fu_421_p3 ^ tmp_12_fu_413_p3);

assign xor_ln340_7_fu_496_p2 = (tmp_15_fu_476_p3 ^ tmp_14_fu_468_p3);

assign xor_ln340_8_fu_551_p2 = (tmp_17_fu_531_p3 ^ tmp_16_fu_523_p3);

assign xor_ln340_9_fu_606_p2 = (tmp_19_fu_586_p3 ^ tmp_18_fu_578_p3);

assign xor_ln340_fu_392_p2 = (tmp_10_fu_358_p3 ^ 1'd1);

assign xor_ln786_1_fu_429_p2 = (tmp_13_fu_421_p3 ^ 1'd1);

assign xor_ln786_2_fu_484_p2 = (tmp_15_fu_476_p3 ^ 1'd1);

assign xor_ln786_3_fu_539_p2 = (tmp_17_fu_531_p3 ^ 1'd1);

assign xor_ln786_4_fu_594_p2 = (tmp_19_fu_586_p3 ^ 1'd1);

assign xor_ln786_fu_374_p2 = (tmp_11_fu_366_p3 ^ 1'd1);

assign y_V_1_fu_689_p3 = ((or_ln340_1_fu_453_p2[0:0] === 1'b1) ? select_ln340_2_fu_673_p3 : select_ln388_1_fu_681_p3);

assign y_V_2_fu_723_p3 = ((or_ln340_2_fu_508_p2[0:0] === 1'b1) ? select_ln340_4_fu_707_p3 : select_ln388_2_fu_715_p3);

assign y_V_3_fu_757_p3 = ((or_ln340_3_fu_563_p2[0:0] === 1'b1) ? select_ln340_6_fu_741_p3 : select_ln388_3_fu_749_p3);

assign y_V_4_fu_791_p3 = ((or_ln340_4_fu_618_p2[0:0] === 1'b1) ? select_ln340_8_fu_775_p3 : select_ln388_4_fu_783_p3);

assign y_V_fu_650_p3 = ((or_ln340_fu_398_p2[0:0] === 1'b1) ? select_ln340_fu_634_p3 : select_ln388_fu_642_p3);

assign zext_ln1118_1_fu_891_p1 = exp_res_1_V_reg_976;

assign zext_ln1118_2_fu_895_p1 = exp_res_2_V_reg_987;

assign zext_ln1118_3_fu_899_p1 = exp_res_3_V_reg_998;

assign zext_ln1118_4_fu_903_p1 = exp_res_4_V_reg_1009;

assign zext_ln1118_fu_887_p1 = exp_res_0_V_reg_965;

assign zext_ln225_1_fu_799_p1 = y_V_1_reg_945;

assign zext_ln225_2_fu_803_p1 = y_V_2_reg_950;

assign zext_ln225_3_fu_807_p1 = y_V_3_reg_955;

assign zext_ln225_4_fu_811_p1 = y_V_4_reg_960;

assign zext_ln225_fu_658_p1 = y_V_fu_650_p3;

assign zext_ln235_fu_877_p1 = tmp_20_fu_867_p4;

assign zext_ln36_fu_857_p1 = exp_table3_q0;

assign zext_ln43_1_fu_818_p1 = exp_res_1_V_reg_976;

assign zext_ln43_2_fu_831_p1 = exp_res_2_V_reg_987;

assign zext_ln43_fu_815_p1 = exp_res_0_V_reg_965;

assign zext_ln700_fu_834_p1 = exp_res_3_V_reg_998;

assign zext_ln703_1_fu_843_p1 = p_Val2_7_fu_837_p2;

assign zext_ln703_2_fu_853_p1 = p_Val2_8_fu_847_p2;

assign zext_ln703_fu_827_p1 = p_Val2_6_fu_821_p2;

endmodule //softmax_stable_array_array_ap_fixed_16_2_5_3_0_5u_softmax_config11_s
